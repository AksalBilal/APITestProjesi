<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Detail_Control_Error_Message" xml:space="preserve">
    <value>
URL           =&gt;{3}
Parameters    =&gt;Name: {0}, Value: {1}, Parameter Type: {2}
Response Body =&gt;{4}

Error Message =&gt;Yukarıdaki bilgiler ile '{1}' search yapıldı. 
Dönen sonuçlardan ismi '{5}' olan filmin Imdb id si alınıp Search By ImdbId yapıldı. 
Dönen response da '{6}' degeri boştu!</value>
    <comment>Genel search kullanılarak "Harry Potter" araması yapılır. gelen sonuçlardan ismi  "Harry Potter and the Sorcerer's Stone" olan filmin ımdb id si alınır ve search by ImdbId kullanılarak aratılır. Gelen sonuçlarda title, year ve released alanlarının gelip gelmediği kontrol edilir. Boş gelen değer var ise hata verir ve bu mesaj gösterilir.
Case :Control_ReturnedData_When_SearchByTitle</comment>
  </data>
  <data name="HTTP_Status_Error_Message" xml:space="preserve">
    <value>
URL           =&gt;{3}
Parameters    =&gt;Name: {0}, Value: {1}, Parameter Type: {2}
Response Body =&gt;{4}

Error Message =&gt;Yukarıdaki bilgiler ile Get istegi atıldı ancak beklenen Status code dönmedi!
</value>
    <comment>Get istegi sonucunda dönülen status kodu OK değilse bu mesaj gösterilir.
Case : Tüm caselerde status kontrolü yapılır.</comment>
  </data>
  <data name="Log_Messages" xml:space="preserve">
    <value>
Method Name: {0}
URL:{1}
Header{2}
Request Body (If There Is):{3}
Response Body (If There Is):{4}
Error Message:{4}</value>
    <comment>Uzun soluklu bir proje düşünüldüğünde yandaki gibi genel bir yapıya dönüştürülebilir. Sadece Error message dinamik olarak değişecek şekilde bir yapı kurulabilir</comment>
  </data>
  <data name="Search_By_IMDBId_Error_Message" xml:space="preserve">
    <value>
URL           =&gt;{3}
Parameters    =&gt;Name: {0}, Value: {1}, Parameter Type: {2}
Response Body =&gt;{4}

Error Message =&gt;Yukarıdaki bilgiler ile Search By Imdb yapıldı. Dönen response dan imdb ıd alınıp karşılaştırıldı ancak beklenildiği gibi değildi!</value>
    <comment>IMDB Id ye göre search yapılır gelen details kısmından ımdb ıd ler karşılaştırılır beklenildiği gibi değilse bu mesaj gösterilir.
Case :Should_ReturnsData_When_SearchByID</comment>
  </data>
  <data name="Title_Control_Error_Message" xml:space="preserve">
    <value>
URL           =&gt;{3}
Parameters    =&gt;Name: {0}, Value: {1}, Parameter Type: {2}
Response Body =&gt;{4}

Error Message =&gt;Yukarıdaki bilgiler ile Get istegi atıldı ancak dönen title lar içerisinde '{5}' geçmeyen bir data vardı!
Title ı beklenildiği gibi olmayan data =&gt;{6}</value>
    <comment>Title a göre search yapılır gelen data lar arasında title i beklenilen title geçmeyen data varsa bu mesaj gösterilir.
Case :Should_ALLTitlesContains_EnteredTitle</comment>
  </data>
  <data name="Wanted_Result_Control_Error_Message" xml:space="preserve">
    <value>
URL           =&gt;{3}
Parameters    =&gt;Name: {0}, Value: {1}, Parameter Type: {2}
Response Body =&gt;{4}

Error Message =&gt;Yukarıdaki bilgiler ile '{1}' search yapıldı. 
Ancak dönen sonuçlardan ismi '{5}' olan bir data bulunamadı!.</value>
    <comment>Genel search kullanılarak "Harry Potter" araması yapılır. gelen sonuçlardan aranan isimde bir data bulunmadığı zaman bu mesaj gösterilir.</comment>
  </data>
</root>